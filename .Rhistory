plot(by_week, type='l', col='blue', main = lake)
lines(one_depth, col='green', lty=2)
legend('top', legend = c('integrated', 'near-surface'), col=c('blue', 'green'), lty = 1:2)
}
dev.off()
library(soilmoisturer)
scan_elements()
cache.location = 'D:/BigDatasets/RStudioUsage'
start <- as.Date('2014-10-01')
today <- as.Date(Sys.time())
all_days <- seq(start, today, by = 'day')
year <- as.POSIXlt(all_days)$year + 1900
#urls <- paste0('http://cran-logs.rstudio.com/', year, '/', all_days, '.csv.gz')
# You can then use download.file to download into a directory.
# If you only want to download the files you don't have, try:
#missing_days <- setdiff(all_days, tools::file_path_sans_ext(dir(), TRUE))
dat = data.frame()
#all.dat = data.frame()
overall.count = data.frame(day=all_days, count=NA)
for (i in 1:length(all_days)){
#source url and file destination
url = paste0('http://cran-logs.rstudio.com/', year[i], '/', all_days[i], '.csv.gz')
file.loc <- file.path(cache.location, paste0(all_days[i], '.csv.gz'))
if(!file.exists(file.loc)){
out = try(download.file(url, file.loc, method="internal"), silent=TRUE)
if(out!=0)next
}
tmp = read.csv(gzfile(file.loc), header=TRUE, as.is=TRUE)
#all.dat = rbind(all.dat, tmp)
dat <- rbind(dat, tmp[tmp$package=='rLakeAnalyzer', ])
dat <- rbind(dat, tmp[tmp$package=='StreamMetabolism', ])
dat <- rbind(dat, tmp[tmp$package=='LakeMetabolizer', ])
dat <- rbind(dat, tmp[tmp$package=='dataRetrieval', ])
overall.count$count[i] = nrow(tmp)
#unlink(file.loc)
}
dat = dat[!is.na(dat$date), ]
#Join old data with the new data
dat = unique(rbind(dat, past.data))
dat = dat[order(dat$date),]
head(dat)
library(dplyr)
filter(dat, package='rLakeAnalyzer')
filter(dat, package=='rLakeAnalyzer') %>% summarise(length(.))
filter(dat, package=='rLakeAnalyzer') %>% summarise(length(version))
length(filter(dat, package=='rLakeAnalyzer') )
nrow(filter(dat, package=='rLakeAnalyzer') )
range(tmp$date)
range(dat$date)
today <- as.Date(Sys.time())
all_days <- seq(start, today, by = 'day')
all_days
year <- as.POSIXlt(all_days)$year + 1900
dat = data.frame()
#all.dat = data.frame()
overall.count = data.frame(day=all_days, count=NA)
for (i in 1:length(all_days)){
#source url and file destination
url = paste0('http://cran-logs.rstudio.com/', year[i], '/', all_days[i], '.csv.gz')
file.loc <- file.path(cache.location, paste0(all_days[i], '.csv.gz'))
cat(file.loc, '\n')
if(!file.exists(file.loc)){
out = try(download.file(url, file.loc, method="internal"), silent=TRUE)
if(out!=0)next
}
tmp = read.csv(gzfile(file.loc), header=TRUE, as.is=TRUE)
#all.dat = rbind(all.dat, tmp)
dat <- rbind(dat, tmp[tmp$package=='rLakeAnalyzer', ])
dat <- rbind(dat, tmp[tmp$package=='StreamMetabolism', ])
dat <- rbind(dat, tmp[tmp$package=='LakeMetabolizer', ])
dat <- rbind(dat, tmp[tmp$package=='dataRetrieval', ])
overall.count$count[i] = nrow(tmp)
#unlink(file.loc)
}
dat = dat[!is.na(dat$date), ]
nrow(dat)
length(filter(dat, package=='rLakeAnalyzer'))
nrow(filter(dat, package=='rLakeAnalyzer'))
nrow(filter(dat, package=='LakeMetabolizer'))
tmp = ddply(dat[dat$package == 'rLakeAnalyzer', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'rLakeAnalyzer', ], c('year','week'), function(df)nrow(df))
plot(tmp$V1, type='o')
dat$day = as.POSIXct(trunc(as.POSIXct(dat$date), units='days'))
dat$week = floor(as.POSIXlt(dat$date)$yday/7)
dat$year = as.POSIXlt(dat$date)$year + 1900
tmp = ddply(dat[dat$package == 'rLakeAnalyzer', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'rLakeAnalyzer', ], c('year','week'), function(df)nrow(df))
plot(tmp$V1, type='o')
dev.off()
plot(tmp$V1, type='o')
tmp
tmp = ddply(dat[dat$package == 'rLakeAnalyzer', ], c('day'), function(dt)nrow(dt))
library(plyr)
tmp = ddply(dat[dat$package == 'rLakeAnalyzer', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'rLakeAnalyzer', ], c('year','week'), function(df)nrow(df))
plot(tmp$V1, type='o')
library(plyr)
tmp = ddply(dat[dat$package == 'LakeMetabolizer', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'LakeMetabolizer', ], c('year','week'), function(df)nrow(df))
plot(tmp$V1, type='o')
tmp = ddply(dat[dat$package == 'LakeMetabolizer', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'rLakeAnalyzer', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'LakeMetabolizer', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'rLakeAnalyzer', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'dataRetrieval', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'StreamMetabolizm', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'StreamMetabolism', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
tmp = ddply(dat[dat$package == 'LakeMetabolizer', ], c('day'), function(dt)nrow(dt))
plot(tmp, type='o')
library(rLakeAnalyzer)
load.ts('d:/test/Esthwaite_daily.txt')
wtr = load.ts('d:/test/Esthwaite_daily.txt')
meta.depths(wtr)
ts.meta.depths(wtr)
md = ts.meta.depths(wtr)
plot(md$datetime, md$top)
plot(md$datetime, md$top, type='l')
lines(md$datetime, md$bottom, type='l')
lines(md$datetime, md$bottom, type='l', col='red')
md = ts.meta.depths(wtr,seasonal=TRUE)
plot(md$datetime, md$top, type='l')
lines(md$datetime, md$bottom, type='l')
lines(md$datetime, md$bottom, type='l', col='red')
View(wtr)
View(md)
plot(wtr[210,],get.offsets(wtr))
plot(wtr[210,-1], get.offsets(wtr))
plot(as.vector(wtr[210,-1]), get.offsets(wtr))
as.vector(wtr[210,-1])
get.offsets(wtr)
length(get.offsets(wtr))
as.matrix(wtr[210,-1])
plot(as.vector(as.matrix(wtr[210,-1])), get.offset(wtr))
plot(as.vector(as.matrix(wtr[210,-1])), get.offsets(wtr))
plot(as.vector(as.matrix(wtr[210,-1])), get.offsets(wtr), ylim=c(12,0))
plot(as.vector(as.matrix(wtr[638,-1])), get.offsets(wtr), ylim=c(12,0))
plot(datetime ~ top, md)
plot(top ~ datetime, md[629:650])
plot(top ~ datetime, md[629:650,])
head(wtr)
plot(as.vector(as.matrix(wtr[639,-1])), get.offsets(wtr), ylim=c(12,0))
plot(as.vector(as.matrix(wtr[640,-1])), get.offsets(wtr), ylim=c(12,0))
plot(as.vector(as.matrix(wtr[640,-1])), get.offsets(wtr), ylim=c(12,0))
plot(as.vector(as.matrix(wtr[641,-1])), get.offsets(wtr), ylim=c(12,0))
library(soilmoisturetools)
?readBin
vec = c(1,2,3,4,5,6)
vec
?matrix
matrix(vec, ncol=2)
matrix(vec, ncol=2, byrow=TRUE)
matrix(vec, nrow=2)
load('D:\\USGS-R\\grantools\\.RData')
library(geocode)
library(stringr)
all_logs$country = geocode.ips.country(all_logs$ip)$country
all_logs$country = geocode.ips.country(all_logs$ip)$country
just_packages = filter_packages(all_logs)
filter_packages = function(df){
all_get_r = all_logs[all_logs$operation == 'WEBSITE.GET.OBJECT' &
grepl(pattern='R/.*' , all_gets$key), ]
#grab !PACKAGES and just .zip or .tar.gz or .tgz file downloads
all_get_r = all_get_r[!grepl('(PACKAGES\\.gz)|(PACKAGES)', all_get_r$key) &
grepl('(.*\\.zip)|(.*\\.tar\\.gz)|(.*\\.tgz)', all_get_r$key), ]
return(all_get_r)
}
just_packages = filter_packages(all_logs)
head(all_gets)
head(9)all_logs)
head(all_logs)
filter_packages = function(df){
all_get_r = df[df$operation == 'WEBSITE.GET.OBJECT' &
grepl(pattern='R/.*' , df$key), ]
#grab !PACKAGES and just .zip or .tar.gz or .tgz file downloads
all_get_r = all_get_r[!grepl('(PACKAGES\\.gz)|(PACKAGES)', all_get_r$key) &
grepl('(.*\\.zip)|(.*\\.tar\\.gz)|(.*\\.tgz)', all_get_r$key), ]
return(all_get_r)
}
just_packages = filter_packages(all_logs)
head(just_packages)
just_packages$country = geocode.ips.country(just_packages$ip)$country
head(just_packages)
extract_package_names = function(keys){
names =	str_match(basename(keys), '(.*)_.*\\.((tar\\.gz)|tgz|zip)')
return(names[,2])
}
just_packages$packagename = extract_package_names(just_packages$key)
View(just_packages)
getwd()
write.csv(just_packages, '~/gran_dl_stats.csv')
write.csv(just_packages, '~/gran_dl_stats.csv', row.names=FALSE)
library(dplyr)
group_by(just_packages, packagename)
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename))
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename)) %>% order(dl_count)
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename))
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename)) %>% order_by(dl_count)
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename)) %>% order_by(dl_count)
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename)) %>% order_by(dl_count)
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename))
?group_by
?order_by
?sort
ls('package:dplyr')
?arrange
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename)) %>% arrange(dl_count)
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename)) %>% arrange(dl_count, desc())
group_by(just_packages, packagename) %>% summarise(dl_count = length(packagename)) %>% arrange(desc(dl_count))
package_summary = group_by(just_packages, packagename) %>%
summarise(dl_count = length(packagename)) %>%
arrange(desc(dl_count))
write.csv(package_summary, '~/gran_package_dl_stats.csv', row.names=FALSE)
source('D:/Dropbox/Acoustics/R_readEKRaw/demo_script.R')
setwd("D:/Dropbox/Acoustics/R_readEKRaw")
source('D:/Dropbox/Acoustics/R_readEKRaw/demo_script.R')
source('D:/Dropbox/Acoustics/R_readEKRaw/demo_script_function.R')
source('D:/Dropbox/Acoustics/R_readEKRaw/demo_script2.R')
names(test)
test.pings
test[['pints']]
test[['pings']]
test[['pings']][[1]][['samplerange']]
test[['pings']][[1]]
ls()
rm(list=ls())
source('D:/Dropbox/Acoustics/R_readEKRaw/demo_script_function.R')
source('D:/Dropbox/Acoustics/R_readEKRaw/demo_script2.R')
test[['pings']][[1]]
names(test[['pings']][[1]])
data = test
source('D:/Dropbox/Acoustics/R_readEKRaw/GetcalParams.R')
names(test[['pings']][[1]])
names(data[['pings']][[1]])
data[['pings']][[1]]$samplerange
data[['pings']][[1]]
length(data[['pings']])
data[['pings']][[1]]
data[['pings']][[1]]$power
length(data[['pings']][[1]]$power)
data[['pings']][[1]]
?tau
?match
rm(list=ls())
source('D:/Dropbox/Acoustics/R_readEKRaw/demo_script_function.R')
tmp = ReadEKRaw('../L0004-D20140707-T164500-ES60.raw')
source('D:/Dropbox/Acoustics/R_readEKRaw/readEKRaw_ConvertPower.R')
out = ReadEKRaw_ConvertPower(tmp)
tmp$pings[[1]]
names(tmp$pings)
names(tmp$pings[[1]])
source('D:/Dropbox/Acoustics/R_readEKRaw/readEKRaw_ConvertPower.R')
out = ReadEKRaw_ConvertPower(tmp)
names(out$pings[[1]])
Svoutput120 = matrix(, nrow = length(data$pings[[1]]$Sv), ncol = length(data$pings)/2)# blank matrix
Svoutput710 = matrix(, nrow = length(data$pings[[2]]$Sv), ncol = length(data$pings)/2)
for (i in 1:length(data$pings)) {
if (data$pings[[i]]$frequency == 120000){
tmp = (data$pings[[i]]$Sv)
Svoutput120[,i] = tmp
} else if(data$pings[[i]]$frequency == 710000) {
tmp = (data$pings[[i]]$Sv)
Svoutput710[,i] = tmp
}
}
data = out
Svoutput120 = matrix(, nrow = length(data$pings[[1]]$Sv), ncol = length(data$pings)/2)# blank matrix
Svoutput710 = matrix(, nrow = length(data$pings[[2]]$Sv), ncol = length(data$pings)/2)
for (i in 1:length(data$pings)) {
if (data$pings[[i]]$frequency == 120000){
tmp = (data$pings[[i]]$Sv)
Svoutput120[,i] = tmp
} else if(data$pings[[i]]$frequency == 710000) {
tmp = (data$pings[[i]]$Sv)
Svoutput710[,i] = tmp
}
}
Svoutput120 = matrix(, nrow = length(data$pings[[1]]$Sv), ncol = length(data$pings)/2)# blank matrix
Svoutput710 = matrix(, nrow = length(data$pings[[2]]$Sv), ncol = length(data$pings)/2)
Svoutput120 = matrix(, nrow = length(data$pings[[1]]$Sv), ncol = length(data$pings))# blank matrix
Svoutput710 = matrix(, nrow = length(data$pings[[2]]$Sv), ncol = length(data$pings))
for (i in 1:length(data$pings)) {
if (data$pings[[i]]$frequency == 120000){
tmp = (data$pings[[i]]$Sv)
Svoutput120[,i] = tmp
} else if(data$pings[[i]]$frequency == 710000) {
tmp = (data$pings[[i]]$Sv)
Svoutput710[,i] = tmp
}
}
Svoutput120 = matrix(, nrow = length(data$pings[[1]]$Sv), ncol = length(data$pings)/2)# blank matrix
Svoutput710 = matrix(, nrow = length(data$pings[[2]]$Sv), ncol = length(data$pings)/2)
for (i in 1:length(data$pings)) {
if (data$pings[[i]]$frequency == 120000){
tmp = (data$pings[[i]]$Sv)
Svoutput120[,i] = tmp
} else if(data$pings[[i]]$frequency == 710000) {
tmp = (data$pings[[i]]$Sv)
Svoutput710[,i] = tmp
}
}
Svoutput120 = matrix(, nrow = length(data$pings[[1]]$Sv), ncol = length(data$pings))# blank matrix
Svoutput710 = matrix(, nrow = length(data$pings[[2]]$Sv), ncol = length(data$pings))
for (i in 1:length(data$pings)) {
if (data$pings[[i]]$frequency == 120000){
tmp = (data$pings[[i]]$Sv)
Svoutput120[,i] = tmp
} else if(data$pings[[i]]$frequency == 710000) {
tmp = (data$pings[[i]]$Sv)
Svoutput710[,i] = tmp
}
}
head(Svoutput120)
Svoutput120[1,]
!is.na(Svoutput120[1,])
Svoutput120[,!is.na(Svoutput120[1,])]
image(Svoutput120[,1:120])
image(Svoutput120[,1:240])
image(t(Svoutput120[,1:240]))
?image
image(1:120, 1:nrow(Svoutput120), t(Svoutput120[,1:240]))
image(1:240, 1:nrow(Svoutput120), t(Svoutput120[,1:240]))
head(Svoutput120)
Svoutput120 = Svoutput120[,!is.na(Svoutput120[1,])]
Svoutput710 = Svoutput710[,!is.na(Svoutput710[1,])]
image(1:240, 1:nrow(Svoutput120), t(Svoutput120[,1:240]))
size(Svoutput120)
nrow(Svoutput120)
ncol(Svoutput120)
image(Svoutput120)
png('test.png', res=300, width=2000, height=1600)
image(t(Svoutput120))
dev.off()
getwd()
png('710.png', res=300, width=2000, height=1600)
image(t(Svoutput710))
dev.off()
png('710.png', res=300, width=2000, height=1600)
image(t(log10(Svoutput710)))
dev.off()
Svoutput120
?image
source('D:/Dropbox/Acoustics/R_readEKRaw/readEKRaw_ConvertPower.R')
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(t(data), ylim=)
dev.off()
}
plot_ecogram(data)
plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
plot_ecogram(Svoutput710, fname='710.png', threshold = -50)
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(t(data), ylim=ncol(data):1)
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(t(data), ylim=nrow(data):1)
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
10:1
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(t(data), ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(t(data), ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
dev.off()
dev.off()
dev.off()
dev.off()
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(t(data), ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
#data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(t(data), ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
?image
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
#data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(z=t(data), y=nrow(data):1, ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
#data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(z=t(data), x=nrow(data):1, ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
#data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(z=t(data), x=1:nrow(data), ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
#data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(z=t(data), y=1:nrow(data), ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
dev.off()
dev.off()
dev.off()
dev.off()
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
#data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(z=t(data), y=1:nrow(data), ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png')
plot_ecogram = function(data, fname='ecogram.png', threshold=-35){
data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(z=t(data), y=1:nrow(data), ylim=c(nrow(data),1))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, fname='710.png', threshold=-50)
plot_ecogram(Svoutput120, fname='120.png', threshold=-50)
source('D:/Dropbox/Acoustics/R_readEKRaw/readEKRaw_ConvertPower.R')
data = ReadEKRaw_ConvertPower(ReadEKRaw('../L0004-D20140707-T164500-ES60.raw'))
source('D:/Dropbox/Acoustics/R_readEKRaw/readEKRaw_ConvertPower.R')
data = ReadEKRaw_ConvertPower(ReadEKRaw('../L0004-D20140707-T164500-ES60.raw'))
source('D:/Dropbox/Acoustics/R_readEKRaw/readEKRaw_ConvertPower.R')
source('D:/Dropbox/Acoustics/R_readEKRaw/readEKRaw_ConvertPower.R')
data = ReadEKRaw_ConvertPower(ReadEKRaw('../L0004-D20140707-T164500-ES60.raw'))
Svoutput120 = matrix(, nrow = length(data$pings[[1]]$Sv), ncol = length(data$pings))# blank matrix
Svoutput710 = matrix(, nrow = length(data$pings[[2]]$Sv), ncol = length(data$pings))
for (i in 1:length(data$pings)) {
if (data$pings[[i]]$frequency == 120000){
tmp = (data$pings[[i]]$Sv)
Svoutput120[,i] = tmp
} else if(data$pings[[i]]$frequency == 710000) {
tmp = (data$pings[[i]]$Sv)
Svoutput710[,i] = tmp
}
}
#get rid of NA columns
Svoutput120 = Svoutput120[,!is.na(Svoutput120[1,])]
Svoutput710 = Svoutput710[,!is.na(Svoutput710[1,])]
data.pings
data$pings[[1]]
data$pings[[1]]$rangeCorrected
data$pings[[1]]$frequency
data$pings[[2]]$frequency
plot_ecogram(Svoutput710, data$pings[[2]]$rangeCorrected, fname='710.png', threshold=-50)
rev
?rev
#get rid of NA columns
Svoutput120 = Svoutput120[,!is.na(Svoutput120[1,])]
Svoutput710 = Svoutput710[,!is.na(Svoutput710[1,])]
plot_ecogram = function(data, depths, fname='ecogram.png', threshold=-35){
data[data < threshold] = NA
png(fname, res=300, width=2000, height=1600)
image(z=t(data), y=depths, ylim=rev(range(depths)))
dev.off()
}
#plot_ecogram(Svoutput120)
plot_ecogram(Svoutput710, data$pings[[2]]$rangeCorrected, fname='710.png', threshold=-50)
plot_ecogram(Svoutput120, data$pings[[1]]$rangeCorrected, fname='120.png', threshold=-50)
dev.off()
